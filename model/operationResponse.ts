/**
 * Sparks OpenAPI
 * Generated documentation for the Logicdrop Sparks API and OpenAPI clients.  Logicdrop Sparks lets users build rules, analyze data, and automate documents.  Use it to make decisions faster, generate documents better, and learn from your data.  ### Documentation - [User Documentation](https://docs.logicdrop.com)  ### Modules - [Sparks Compute](https://docs.logicdrop.com/rules/introduction) - [Sparks Decision Tables](https://docs.logicdrop.com/rules/authoring-decision-tables) - [Sparks Documents](https://docs.logicdrop.com/documents/introduction)  ### Clients - [OpenAPI Clients](https://docs.logicdrop.com/development/sample-clients)  ### Security - [Authorizing API Requests](https://docs.logicdrop.com/development/authorization) 
 *
 * The version of the OpenAPI document: v_VERSION_, build# _BUILD_
 * Contact: support@logicdrop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from "../api";

export class OperationResponse {
    /**
    * Action performed
    */
    'action'?: string;
    /**
    * Action status
    */
    'status'?: OperationResponse.StatusEnum;
    /**
    * Action message
    */
    'message'?: string;
    /**
    * Size (number of records, bytes, etc.
    */
    'size'?: number;
    /**
    * Action result
    */
    'result'?: object;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "action",
            "baseName": "action",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "OperationResponse.StatusEnum"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "size",
            "baseName": "size",
            "type": "number"
        },
        {
            "name": "result",
            "baseName": "result",
            "type": "object"
        }    ];

    static getAttributeTypeMap() {
        return OperationResponse.attributeTypeMap;
    }
}

export namespace OperationResponse {
    export enum StatusEnum {
        OK = <any> 'OK',
        Created = <any> 'Created',
        Accepted = <any> 'Accepted',
        NoContent = <any> 'No Content',
        ResetContent = <any> 'Reset Content',
        PartialContent = <any> 'Partial Content',
        MovedPermanently = <any> 'Moved Permanently',
        Found = <any> 'Found',
        SeeOther = <any> 'See Other',
        NotModified = <any> 'Not Modified',
        UseProxy = <any> 'Use Proxy',
        TemporaryRedirect = <any> 'Temporary Redirect',
        BadRequest = <any> 'Bad Request',
        Unauthorized = <any> 'Unauthorized',
        PaymentRequired = <any> 'Payment Required',
        Forbidden = <any> 'Forbidden',
        NotFound = <any> 'Not Found',
        MethodNotAllowed = <any> 'Method Not Allowed',
        NotAcceptable = <any> 'Not Acceptable',
        ProxyAuthenticationRequired = <any> 'Proxy Authentication Required',
        RequestTimeout = <any> 'Request Timeout',
        Conflict = <any> 'Conflict',
        Gone = <any> 'Gone',
        LengthRequired = <any> 'Length Required',
        PreconditionFailed = <any> 'Precondition Failed',
        RequestEntityTooLarge = <any> 'Request Entity Too Large',
        RequestURITooLong = <any> 'Request-URI Too Long',
        UnsupportedMediaType = <any> 'Unsupported Media Type',
        RequestedRangeNotSatisfiable = <any> 'Requested Range Not Satisfiable',
        ExpectationFailed = <any> 'Expectation Failed',
        PreconditionRequired = <any> 'Precondition Required',
        TooManyRequests = <any> 'Too Many Requests',
        RequestHeaderFieldsTooLarge = <any> 'Request Header Fields Too Large',
        InternalServerError = <any> 'Internal Server Error',
        NotImplemented = <any> 'Not Implemented',
        BadGateway = <any> 'Bad Gateway',
        ServiceUnavailable = <any> 'Service Unavailable',
        GatewayTimeout = <any> 'Gateway Timeout',
        HTTPVersionNotSupported = <any> 'HTTP Version Not Supported',
        NetworkAuthenticationRequired = <any> 'Network Authentication Required'
    }
}
